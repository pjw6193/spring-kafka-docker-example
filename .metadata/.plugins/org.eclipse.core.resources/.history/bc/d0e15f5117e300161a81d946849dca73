package com.revature.micro.product.tomcat.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

@Component
public class CustomerMessageSender {

	private KafkaTemplate<Integer, Customer> kafkaTemplate;

	@Autowired
	public void setKafkaTemplate(KafkaTemplate<Integer, Customer> kafkaTemplate) {
		this.kafkaTemplate = kafkaTemplate;
	}
	
	public Customer saveCustomer(Customer customer){
		ListenableFuture<SendResult<Integer, Customer>> future =
				kafkaTemplate.send("CREATE_CUSTOMER", customer);
		Customer record = new Customer();
		future.addCallback(
				new ListenableFutureCallback<SendResult<Integer, Customer>>() {
					@Override
					public void onFailure(Throwable e) {
						System.out.println(e.getStackTrace());
					}
					@Override
					public void onSuccess(SendResult<Integer, Customer> result) {
						record.setFirstName(result.getProducerRecord().value().getFirstName());
						record.setId(result.getProducerRecord().value().getId());
						record.setLastName(result.getProducerRecord().value().getLastName());
					}
				});
		return record;
	}
	
	
}
